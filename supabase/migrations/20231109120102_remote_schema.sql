
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."characters" (
    "server" "text" NOT NULL,
    "name" "text" NOT NULL,
    "class" "text" NOT NULL,
    "level" real NOT NULL,
    "user_id" "uuid" NOT NULL,
    "id" "text" NOT NULL
);

ALTER TABLE "public"."characters" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "id" "uuid" NOT NULL,
    "photo" "text" NOT NULL,
    "nickname" "text" NOT NULL,
    "main_character_name" "text"
);

ALTER TABLE "public"."profiles" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."squad_users" (
    "id" bigint NOT NULL,
    "user_id" "uuid" NOT NULL,
    "squad_id" bigint NOT NULL,
    "joined_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."squad_users" OWNER TO "postgres";

ALTER TABLE "public"."squad_users" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."squad_users_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."squads" (
    "id" bigint NOT NULL,
    "name" "text" NOT NULL,
    "code" "text" NOT NULL,
    "owner_id" "uuid" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."squads" OWNER TO "postgres";

ALTER TABLE "public"."squads" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."squads_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE OR REPLACE VIEW "public"."squads_public_view" AS
 SELECT "squads"."id",
    "squads"."name",
    "squads"."owner_id",
    "squads"."created_at"
   FROM "public"."squads";

ALTER TABLE "public"."squads_public_view" OWNER TO "postgres";

ALTER TABLE ONLY "public"."characters"
    ADD CONSTRAINT "characters_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_nickname_key" UNIQUE ("nickname");

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."squad_users"
    ADD CONSTRAINT "squad_users_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."squads"
    ADD CONSTRAINT "squads_code_key" UNIQUE ("code");

ALTER TABLE ONLY "public"."squads"
    ADD CONSTRAINT "squads_name_key" UNIQUE ("name");

ALTER TABLE ONLY "public"."squads"
    ADD CONSTRAINT "squads_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."characters"
    ADD CONSTRAINT "characters_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."squad_users"
    ADD CONSTRAINT "squad_users_squad_id_fkey" FOREIGN KEY ("squad_id") REFERENCES "public"."squads"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."squad_users"
    ADD CONSTRAINT "squad_users_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."squads"
    ADD CONSTRAINT "squads_owner_id_fkey" FOREIGN KEY ("owner_id") REFERENCES "auth"."users"("id");

ALTER TABLE "public"."characters" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."squad_users" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."squads" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "공격대에 속한 유저만 보기 가능" ON "public"."squads" FOR SELECT TO "authenticated" USING (("id" IN ( SELECT "squad_users"."squad_id"
   FROM "public"."squad_users"
  WHERE ("squad_users"."user_id" = "auth"."uid"()))));

CREATE POLICY "모든 사람 읽기 가능" ON "public"."characters" FOR SELECT USING (true);

CREATE POLICY "모든 사람 읽기 가능" ON "public"."profiles" FOR SELECT USING (true);

CREATE POLICY "모든 사람 읽기 가능" ON "public"."squad_users" FOR SELECT USING (true);

CREATE POLICY "자신의 ID로만 생성 가능" ON "public"."characters" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "user_id"));

CREATE POLICY "자신의 ID로만 생성 가능" ON "public"."profiles" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "id"));

CREATE POLICY "자신의 ID로만 생성 가능" ON "public"."squads" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "owner_id"));

CREATE POLICY "자신의 ID에 해당되는 데이터만 수정 가능" ON "public"."characters" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));

CREATE POLICY "자신의 ID에 해당되는 데이터만 수정 가능" ON "public"."profiles" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "id")) WITH CHECK (("auth"."uid"() = "id"));

CREATE POLICY "자신의 ID에 해당되는 데이터만 수정 가능" ON "public"."squads" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "owner_id")) WITH CHECK (("auth"."uid"() = "owner_id"));

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON TABLE "public"."characters" TO "anon";
GRANT ALL ON TABLE "public"."characters" TO "authenticated";
GRANT ALL ON TABLE "public"."characters" TO "service_role";

GRANT ALL ON TABLE "public"."profiles" TO "anon";
GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";

GRANT ALL ON TABLE "public"."squad_users" TO "anon";
GRANT ALL ON TABLE "public"."squad_users" TO "authenticated";
GRANT ALL ON TABLE "public"."squad_users" TO "service_role";

GRANT ALL ON SEQUENCE "public"."squad_users_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."squad_users_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."squad_users_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."squads" TO "anon";
GRANT ALL ON TABLE "public"."squads" TO "authenticated";
GRANT ALL ON TABLE "public"."squads" TO "service_role";

GRANT ALL ON SEQUENCE "public"."squads_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."squads_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."squads_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."squads_public_view" TO "anon";
GRANT ALL ON TABLE "public"."squads_public_view" TO "authenticated";
GRANT ALL ON TABLE "public"."squads_public_view" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
